diff -Naur --exclude=CVS --exclude=.git qt-everywhere-opensource-src-5.5.1/qtbase/src/corelib/io/qlockfile_p.h qt-everywhere-opensource-src-5.5.1-patched/qtbase/src/corelib/io/qlockfile_p.h
--- qt-everywhere-opensource-src-5.5.1/qtbase/src/corelib/io/qlockfile_p.h	2015-10-13 07:35:31.000000000 +0300
+++ qt-everywhere-opensource-src-5.5.1-patched/qtbase/src/corelib/io/qlockfile_p.h	2016-01-29 11:53:10.000000000 +0300
@@ -78,7 +78,7 @@
     static QString processNameByPid(qint64 pid);
 
 #ifdef Q_OS_UNIX
-    static int checkFcntlWorksAfterFlock();
+    static int checkFcntlWorksAfterFlock(const QString &fn);
 #endif
 
     QString fileName;
diff -Naur --exclude=CVS --exclude=.git qt-everywhere-opensource-src-5.5.1/qtbase/src/corelib/io/qlockfile_unix.cpp qt-everywhere-opensource-src-5.5.1-patched/qtbase/src/corelib/io/qlockfile_unix.cpp
--- qt-everywhere-opensource-src-5.5.1/qtbase/src/corelib/io/qlockfile_unix.cpp	2015-10-13 07:35:31.000000000 +0300
+++ qt-everywhere-opensource-src-5.5.1-patched/qtbase/src/corelib/io/qlockfile_unix.cpp	2016-01-29 11:53:10.000000000 +0300
@@ -39,6 +39,10 @@
 #include "QtCore/qfileinfo.h"
 #include "QtCore/qdebug.h"
 #include "QtCore/qdatetime.h"
+#include "QtCore/qfileinfo.h"
+#include "QtCore/qcache.h"
+#include "QtCore/qglobalstatic.h"
+#include "QtCore/qmutex.h"
 
 #include "private/qcore_unix_p.h" // qt_safe_open
 #include "private/qabstractfileengine_p.h"
@@ -89,10 +93,10 @@
     return pos;
 }
 
-int QLockFilePrivate::checkFcntlWorksAfterFlock()
+int QLockFilePrivate::checkFcntlWorksAfterFlock(const QString &fn)
 {
 #ifndef QT_NO_TEMPORARYFILE
-    QTemporaryFile file;
+    QTemporaryFile file(fn);
     if (!file.open())
         return 0;
     const int fd = file.d_func()->engine()->handle();
@@ -114,24 +118,34 @@
 #endif
 }
 
-static QBasicAtomicInt fcntlOK = Q_BASIC_ATOMIC_INITIALIZER(-1);
+// Cache the result of checkFcntlWorksAfterFlock for each directory a lock
+// file is created in because in some filesystems, like NFS, both locks
+// are the same.  This does not take into account a filesystem changing.
+// QCache is set to hold a maximum of 10 entries, this is to avoid unbounded
+// growth, this is caching directories of files and it is assumed a low number
+// will be sufficient.
+typedef QCache<QString, bool> CacheType;
+Q_GLOBAL_STATIC_WITH_ARGS(CacheType, fcntlOK, (10));
+static QBasicMutex fcntlLock;
 
 /*!
   \internal
   Checks that the OS isn't using POSIX locks to emulate flock().
   OS X is one of those.
 */
-static bool fcntlWorksAfterFlock()
+static bool fcntlWorksAfterFlock(const QString &fn)
 {
-    int value = fcntlOK.load();
-    if (Q_UNLIKELY(value == -1)) {
-        value = QLockFilePrivate::checkFcntlWorksAfterFlock();
-        fcntlOK.store(value);
+    QMutexLocker lock(&fcntlLock);
+    bool *worksPtr = fcntlOK->object(fn);
+    if (!worksPtr) {
+        worksPtr = new bool(QLockFilePrivate::checkFcntlWorksAfterFlock(fn));
+        fcntlOK->insert(fn, worksPtr);
     }
-    return value == 1;
+
+    return *worksPtr;
 }
 
-static bool setNativeLocks(int fd)
+static bool setNativeLocks(const QString &fileName, int fd)
 {
 #if defined(LOCK_EX) && defined(LOCK_NB)
     if (flock(fd, LOCK_EX | LOCK_NB) == -1) // other threads, and other processes on a local fs
@@ -143,8 +157,10 @@
     flockData.l_start = 0;
     flockData.l_len = 0; // 0 = entire file
     flockData.l_pid = getpid();
-    if (fcntlWorksAfterFlock() && fcntl(fd, F_SETLK, &flockData) == -1) // for networked filesystems
+    if (fcntlWorksAfterFlock(QDir::cleanPath(QFileInfo(fileName).absolutePath()) + QString('/'))
+        && fcntl(fd, F_SETLK, &flockData) == -1) { // for networked filesystems
         return false;
+    }
     return true;
 }
 
@@ -171,8 +187,10 @@
         }
     }
     // Ensure nobody else can delete the file while we have it
-    if (!setNativeLocks(fd))
-        qWarning() << "setNativeLocks failed:" << strerror(errno);
+    if (!setNativeLocks(fileName, fd)) {
+        const int errnoSaved = errno;
+        qWarning() << "setNativeLocks failed:" << qt_error_string(errnoSaved);
+    }
 
     if (qt_write_loop(fd, fileData.constData(), fileData.size()) < fileData.size()) {
         close(fd);
@@ -193,7 +211,7 @@
     const int fd = qt_safe_open(lockFileName.constData(), O_WRONLY, 0644);
     if (fd < 0) // gone already?
         return false;
-    bool success = setNativeLocks(fd) && (::unlink(lockFileName) == 0);
+    bool success = setNativeLocks(fileName, fd) && (::unlink(lockFileName) == 0);
     close(fd);
     return success;
 }
