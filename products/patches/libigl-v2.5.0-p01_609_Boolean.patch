--- libigl-v2.5.0_ref/tutorial/609_Boolean/main.cpp	2024-05-24 17:16:22.793731575 +0200
+++ libigl-v2.5.0_dev/tutorial/609_Boolean/main.cpp	2024-05-24 17:17:14.666323894 +0200
@@ -1,4 +1,5 @@
-#include <igl/readOFF.h>
+#include <igl/readOBJ.h>
+#include <igl/writeOBJ.h>
 //#undef IGL_STATIC_LIBRARY
 #include <igl/copyleft/cgal/mesh_boolean.h>
 #include <igl/opengl/glfw/Viewer.h>
@@ -7,9 +8,9 @@
 #include <iostream>
 
 
-Eigen::MatrixXd VA,VB,VC;
+Eigen::MatrixXd VA,VB,VC; // Vertices
 Eigen::VectorXi J,I;
-Eigen::MatrixXi FA,FB,FC;
+Eigen::MatrixXi FA,FB,FC; // Faces
 igl::MeshBooleanType boolean_type(
   igl::MESH_BOOLEAN_TYPE_UNION);
 
@@ -18,11 +19,9 @@
   "Union",
   "Intersect",
   "Minus",
-  "XOR",
-  "Resolve",
 };
 
-void update(igl::opengl::glfw::Viewer &viewer)
+void boolean(std::string out_path)
 {
   igl::copyleft::cgal::mesh_boolean(VA,FA,VB,FB,boolean_type,VC,FC,J);
   Eigen::MatrixXd C(FC.rows(),3);
@@ -36,60 +35,34 @@
       C.row(f) = Eigen::RowVector3d(0,1,0);
     }
   }
-  viewer.data().clear();
-  viewer.data().set_mesh(VC,FC);
-  viewer.data().set_colors(C);
-  std::cout<<"A "<<MESH_BOOLEAN_TYPE_NAMES[boolean_type]<<" B."<<std::endl;
+  igl::writeOBJ(out_path, VC, FC);
 }
 
-bool key_down(igl::opengl::glfw::Viewer &viewer, unsigned char key, int mods)
+int main(int argc, char *argv[])
 {
-  switch(key)
+  using namespace Eigen;
+  using namespace std;
+  if (argc < 5)
+  {
+      return 1;
+  }
+  std::string operation = argv[1];
+
+  if (operation == "intersection")
   {
-    default:
-      return false;
-    case '.':
       boolean_type =
-        static_cast<igl::MeshBooleanType>(
-          (boolean_type+1)% igl::NUM_MESH_BOOLEAN_TYPES);
-      break;
-    case ',':
+          static_cast<igl::MeshBooleanType>(
+                  (boolean_type+1)% igl::NUM_MESH_BOOLEAN_TYPES);
+  } else if (operation == "difference")
+  {
       boolean_type =
-        static_cast<igl::MeshBooleanType>(
-          (boolean_type+igl::NUM_MESH_BOOLEAN_TYPES-1)%
-          igl::NUM_MESH_BOOLEAN_TYPES);
-      break;
-    case '[':
-      viewer.core().camera_dnear -= 0.1;
-      return true;
-    case ']':
-      viewer.core().camera_dnear += 0.1;
-      return true;
+          static_cast<igl::MeshBooleanType>(
+                  (boolean_type+2)% igl::NUM_MESH_BOOLEAN_TYPES);
   }
-  update(viewer);
-  return true;
-}
-
-int main(int argc, char *argv[])
-{
-  using namespace Eigen;
-  using namespace std;
-  igl::readOFF(TUTORIAL_SHARED_PATH "/cheburashka.off",VA,FA);
-  igl::readOFF(TUTORIAL_SHARED_PATH "/decimated-knight.off",VB,FB);
-  // Plot the mesh with pseudocolors
-  igl::opengl::glfw::Viewer viewer;
-
-  // Initialize
-  update(viewer);
-
-  viewer.data().show_lines = true;
-  viewer.callback_key_down = &key_down;
-  viewer.core().camera_dnear = 3.9;
-  cout<<
-    "Press '.' to switch to next boolean operation type."<<endl<<
-    "Press ',' to switch to previous boolean operation type."<<endl<<
-    "Press ']' to push near cutting plane away from camera."<<endl<<
-    "Press '[' to pull near cutting plane closer to camera."<<endl<<
-    "Hint: investigate _inside_ the model to see orientation changes."<<endl;
-  viewer.launch();
+  std::string fn1 = argv[2];
+  std::string fn2 = argv[3];
+  std::string out_path = argv[4];
+  igl::readOBJ(fn1,VA,FA);
+  igl::readOBJ(fn2,VB,FB);
+  boolean(out_path);
 }
