--- packagespy_ref/packagespy/xyzpy/loggingXyz.py	2023-02-07 16:18:10.000000000 +0100
+++ packagespy_dev/packagespy/xyzpy/loggingXyz.py	2023-11-29 15:19:00.132612280 +0100
@@ -855,7 +855,7 @@
   logger.addHandler(handler)
   # as RootLogger is level WARNING
   # my logger is not notset but low, handlers needs setlevel greater
-  logger.setLevel(LOGI.DEBUG)
+  logger.setLevel(LOGI.INFO)
   # import src/debug as DBG
   # tmp = (logger.getEffectiveLevel(), LOGI.NOTSET, logger.level, logger.parent.level)
   # DBG.write("logger levels tmp, True)
@@ -888,7 +888,7 @@
   if level is not None:
     logger.setLevel(level)
   else:
-    logger.setLevel(LOGI.DEBUG)
+    logger.setLevel(LOGI.INFO)
 
 
 def _getDefaultLogger():
@@ -989,14 +989,14 @@
   print("\n**** DEFAULT logger")
   logdef = getDefaultLogger()
   # use of setColorLevelname <color>...<reset>, so do not use %(levelname)-8s
-  initLoggerAsDefault(logdef, '%(levelname)s :: %(message)s', level=LOGI.DEBUG)
+  initLoggerAsDefault(logdef, '%(levelname)s :: %(message)s', level=LOGI.INFO)
   testLogger_1(logdef)
   print("\n**** DEFAULT logger NoReturn")
   logdef.testNoReturn()
 
   print("\n**** UNITTEST logger")
   loguni = getUnittestLogger()
-  initLoggerAsUnittest(loguni, '%(asctime)s :: %(levelname)-8s :: %(message)s', level=LOGI.DEBUG)
+  initLoggerAsUnittest(loguni, '%(asctime)s :: %(levelname)-8s :: %(message)s', level=LOGI.INFO)
   testLogger_1(loguni) # is silent
   # log("loguni.getLogs():\n%s" % loguni.getLogs())
   print("loguni.streamUnittest:\n%s" % loguni.getLogs())
