--- paravis_ref/src/Plugins/MEDReader/plugin/Test/MEDReaderHelper.py	2025-07-07 10:59:27.878616938 +0200
+++ paravis_dev/src/Plugins/MEDReader/plugin/Test/MEDReaderHelper.py	2025-07-07 11:00:27.491239027 +0200
@@ -21,12 +21,16 @@
 
 def WriteInTmpDir(func):
     def decoratedFunc(*args,**kwargs):
-        import tempfile,os
+        import tempfile,os,platform
         ret = None
+        currentDir = os.getcwd()
         with tempfile.TemporaryDirectory() as tmpdirname:
             os.chdir(tmpdirname)
             ret = func(*args,**kwargs)
-            pass
+            # On Windows, if one deletes the temporary directory while busy
+            # with it, it raises an error. So we change back to the original
+            if platform.system() == "Windows" :
+                os.chdir(currentDir)
         return ret
     return decoratedFunc
 
--- paravis_ref/src/Plugins/MEDReader/plugin/Test/testMEDReader0.py	2025-07-07 10:59:27.879616949 +0200
+++ paravis_dev/src/Plugins/MEDReader/plugin/Test/testMEDReader0.py	2025-07-07 11:00:57.591554350 +0200
@@ -21,7 +21,7 @@
 
 import os
 import sys
-
+import platform
 from medcoupling import *
 from paraview.simple import *
 from MEDReaderHelper import WriteInTmpDir,RetriveBaseLine
@@ -94,7 +94,10 @@
     myMedReader.UpdatePipeline()
     myMedReader.FieldsStatus = ['TS0/mesh/ComSup0/SolutionDEPL@@][@@P1', 'TS0/mesh/ComSup0/SolutionSIEF_ELGA@@][@@GAUSS', 'TS0/mesh/ComSup0/SolutionSIEQ_ELNO@@][@@GSSNE', 'TS0/mesh/ComSup0/mesh@@][@@P0']
     myMedReader.UpdatePipeline()
-    assert(myMedReader.CellData.GetNumberOfArrays()==5) # vtkGhostType
+    if platform.system() == "Windows" :
+        assert(myMedReader.CellData.GetNumberOfArrays()==4)
+    else:
+        assert(myMedReader.CellData.GetNumberOfArrays()==5) # vtkGhostType
 
     keys=myMedReader.GetProperty("FieldsTreeInfo")[::2]
     # list all the names of arrays that can be seen (including their spatial discretization)
--- paravis_ref/src/Plugins/MEDReader/plugin/Test/testMEDReader10.py	2025-07-07 10:59:27.879616949 +0200
+++ paravis_dev/src/Plugins/MEDReader/plugin/Test/testMEDReader10.py	2025-07-07 11:00:27.491239027 +0200
@@ -21,7 +21,7 @@
 
 import os
 import sys
-
+import platform
 from medcoupling import *
 from paraview.simple import *
 from MEDReaderHelper import WriteInTmpDir,RetriveBaseLine
@@ -90,7 +90,10 @@
     wbv.ScaleFactor=0.1
     wbv.Vectors=['POINTS','f3NbComp4_Vector']
     print( list(wbv.PointData.keys()) )
-    assert(list(wbv.PointData.keys())==['f0NbComp1', 'f1NbComp2', 'f2NbComp3', 'f3NbComp4', 'f1NbComp2_Vector', 'f3NbComp4_Vector', 'vtkGhostType'])
+    if platform.system() == "Windows" :
+      assert(list(wbv.PointData.keys())==['f0NbComp1', 'f1NbComp2', 'f2NbComp3', 'f3NbComp4', 'f1NbComp2_Vector', 'f3NbComp4_Vector'])
+    else:
+      assert(list(wbv.PointData.keys())==['f0NbComp1', 'f1NbComp2', 'f2NbComp3', 'f3NbComp4', 'f1NbComp2_Vector', 'f3NbComp4_Vector', 'vtkGhostType'])
     #
     DataRepresentation2 = Show()
     DataRepresentation2.EdgeColor = [0.0, 0.0, 0.5000076295109483]
--- paravis_ref/src/Plugins/MEDReader/plugin/Test/testMEDReader22.py	2025-07-07 10:59:27.880616959 +0200
+++ paravis_dev/src/Plugins/MEDReader/plugin/Test/testMEDReader22.py	2025-07-07 11:00:27.491239027 +0200
@@ -88,7 +88,10 @@
     ds_bl = blocks.GetBlock(0)
     MyAssert(ds_bl.GetNumberOfCells()==4)
     bl_ref_conn = np.array([ 1,  0,  6,  7,  2,  1,  7,  8,  7,  6, 12, 13,  8,  7, 13, 14],dtype=np.int32)
-    MyAssert(ds_bl.GetCellData().GetNumberOfArrays() == 4 )# 3 for field, mesh and FamilyIdCell +1 for vtkGhostType
+    if platform.system() == "Windows" :
+        MyAssert(ds_bl.GetCellData().GetNumberOfArrays() == 3 )# 3 for field, mesh and FamilyIdCell
+    else:
+        MyAssert(ds_bl.GetCellData().GetNumberOfArrays() == 4 )#  3 for field, mesh and FamilyIdCell +1 for vtkGhostTyp
     MyAssert(np.all( bl_ref_conn == numpy_support.vtk_to_numpy( ds_bl.GetCells().GetConnectivityArray() )) )
     MyAssert( mc.DataArrayDouble(numpy_support.vtk_to_numpy( ds_bl.GetCellData().GetArray("field") )).isEqual(f.getArray()[grp_BottomLeft],1e-12) )
     # test of bottom right
@@ -111,7 +114,10 @@
     MyAssert( mc.DataArrayDouble(numpy_support.vtk_to_numpy( ds_tr.GetCellData().GetArray("field") )).isEqual(f.getArray()[grp_TopRight],1e-12) )
     #
     for ds in [ds_bl,ds_br,ds_tl,ds_tr]:
-        MyAssert(ds.GetPointData().GetNumberOfArrays() == 2 )# 1 for field2 + vtkGhostType
+        if platform.system() == "Windows" :
+            MyAssert(ds.GetPointData().GetNumberOfArrays() == 1 )# 1 for field2
+        else:
+            MyAssert(ds.GetPointData().GetNumberOfArrays() == 2 )# 1 for field2 + vtkGhostType
         MyAssert(ds.GetNumberOfPoints()==36) # for performance reasons all blocks share the same input coordinates
         MyAssert(mc.DataArrayDouble( numpy_support.vtk_to_numpy( ds.GetPointData().GetArray("field2") ) ).isEqual(f2.getArray(),1e-12) )
 
--- paravis_ref/src/Plugins/MEDReader/plugin/Test/testMEDReader23.py	2025-07-07 10:59:27.880616959 +0200
+++ paravis_dev/src/Plugins/MEDReader/plugin/Test/testMEDReader23.py	2025-07-07 11:00:27.491239027 +0200
@@ -23,6 +23,7 @@
 Non regression test of EDF24514. GlobalNodeIds present in MED file whereas it does not appear into output DataSet of MEDReader.
 """
 
+import platform
 from paraview.simple import *
 import medcoupling as mc
 from vtk.util import numpy_support
@@ -49,7 +50,11 @@
 myMedReader.FieldsStatus = ['TS0/mesh/ComSup0/mesh@@][@@P0']
 myMedReader.UpdatePipeline()
 # first important testing here
-MyAssert(   [myMedReader.PointData.GetArray(i).GetName() for i in range(myMedReader.PointData.GetNumberOfArrays())] == ['GlobalNodeIds','vtkGhostType']    )
+
+if platform.system() == "Windows" :
+  MyAssert(   [myMedReader.PointData.GetArray(i).GetName() for i in range(myMedReader.PointData.GetNumberOfArrays())] == ['GlobalNodeIds']    )
+else:
+  MyAssert(   [myMedReader.PointData.GetArray(i).GetName() for i in range(myMedReader.PointData.GetNumberOfArrays())] == ['GlobalNodeIds','vtkGhostType']    )
 ReadUnstructuredGrid = servermanager.Fetch(myMedReader).GetBlock(0)
 numpy_support.vtk_to_numpy( ReadUnstructuredGrid.GetPointData().GetArray('GlobalNodeIds') )
 # check match of coordinates written in testMEDReader23.med file and its representation
